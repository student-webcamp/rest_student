---
layout: post
title:  "HTTP | Часть первая. О том, как представить себя браузером"
date:   2017-02-05 09:59:47 +0200
author: Zhukova
author_linkedin: https://ua.linkedin.com/in/helenzhukova
tags: REST
categories: HTTP
---

# HTTP

## Часть первая. О том, как представить себя браузером.


Интернет - это огромное множество компьютеров, хранящих информации более [1 зеттабайта](http://www.cisco.com/c/en/us/solutions/collateral/service-provider/visual-networking-index-vni/vni-hyperconnectivity-wp.html) , а это более миллиарда терабайт, то есть более 2 миллиардов самых продаваемых, на сегодня в amazon ssd на 500GB.

В среднем [3 миллиарда человек в день](http://www.internetlivestats.com/internet-users/) заходят в Интернет.
Они все и каждый в отдельности, в том числе и вы прямо сейчас, используют интернет браузер, чтобы получить свою каплю из этого океана байт информации.
Но что делает это возможным? Как работает ваше общение со всемирной паутиной?

Существует огромная материальная инфраструктура из кабелей и дата центров, которые занимаются передачей и обработкой данных, но мы будем говорить не о технике, а о технологии передачи данных, которая называется HTTP - Hypertext Transfer Protocol.

<div class="responsive-embed widescreen">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/3vINrFRBQDw" frameborder="0" allowfullscreen></iframe>
</div>

### <span class="icon-homecode" id="one" data-magellan-target="one"></span> HTTP сообщение

Вы открываете свой браузер и вводите адрес сайта, на который хотите попасть, через некоторое время, вы видите на экране страницу и начинаете потреблять ее содержимое, так выглядит наше общение с Интернетом с точки зрения человека.

Теперь я поменяю угол и посмотрю, как это выглядит со стороны машин.

Я представляю себя клиентом, я могу быть приложением, таким как браузер Chrome, могу быть командной строкой или чем угодно другим, что умеет общаться по HTTP, но я представляю себя в роли браузера Chrome.

Когда мне дают веб адрес, я совершаю **HTTP транзакцию**, которую начинаю с того, что посылаю на сервер **сообщение (request)**.
У этого сообщения есть обязательный формат (Это текстовое сообщение, так что мы можем его вполне нормально воспринимать человеческим взглядом).
Я начинаю свое сообщение со стартовой строки, где первым делом указываю **HTTP метод**.

Метод говорит серверу о том, какой тип операции вы хотите совершить, если упростить, то вы хотите либо считывать информацию, тогда это будет метод GET, либо записывать ее и это будет метод POST или PUT. Есть и другие методы, но пока что надо просто показать страничку, поэтому я записываю GET в самое начало сообщения.

Затем я указываю путь, допустим, это будет начальная страница /index.html.

Дальше я сообщаю о версии протокола, по которому будете общаться HTTP/1.1

```
GET /index.html HTTP/1.1
```

Я завершаю стартовую строку и перехожу к **заголовкам (headers)**, буду их называть хедерами.

В первый заголовок `User-Agent`, я вписываю данные о себе. По историческим причинам, я хочу запутать сервер и не говорю прямо, о том что я - Chrome, я передаю такую строку, которая дает понять серверу, что я - какой-то браузер, и точно не IE.

```
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36
```

Дальше я указываю владельца страницы index.html

```
Host: student.webcamp.com.ua/rest_student
```

В моем сообщении могло бы быть тело, в котором я могу передать параметры на сервер, но не в случае метода GET, так что вернемся к этому позже.

Итак, сообщение готово. Отправив HTTP запрос со своим сообщением на сервер, я жду, что мне ответит сервер.
Когда сервер готов, он посылает мне свое сообщение, у которого тоже есть формат, он похож на тот, что ранее был послан мной, но у него другие поля.

![http response](/rest_student/img/http/http-response.png)

> В ответном **сообщении (response)** тоже есть стартовая строка, здесь сервер говорит мне **статус код** своего ответа, если все хорошо, я получу статус 200 или в диапазоне от 200 до 400, код от 400 - это уже плохие новости об ошибке, например, код 404 говорит о том, что страницы, которую вы хотите получить нет.

### <span class="icon-homecode" id="two" data-magellan-target="two"></span> MIME типы

В хедерах сообщения сервер говорит вам про дату сообщения, информацию о себе, размер и тип ресурса.

Мы с вами уже говорили, когда обсуждали URI (вот ссылка), что ресурсом может быть любой контент и один ресурс может содержать ссылки на другие ресурсы.
Например, мы запросили html страницу, а в ней есть изображения, значит, браузер подхватит ссылки на изображения и пошлет еще запросы, чтобы загрузить и показать картинки.

Так вот, сервер предупредит браузер о том, какой тип ресурса он сейчас получит через хедер `Content-type`. Есть довольно большой список типов ресурсов, которые можно передать по HTTP, эти типы называют еще MIME type. **MIME (Multipurpose Internet Mail Extensions)** изначально придумали для передачи сообщений по электронной почте (в ее более давнем виде) и эта типизация отлично и понятно работала, поэтому ее перенесли и в HTTP.

Всего MIME типов более сотни, вот самые популярные из них:

- Для HTML текста это text/html.
- Обычный текст text/plain.
- JPEG изображение image/jpeg.
- Для JSON это application/json

![http mime](/rest_student/img/http/http-mimetypes.jpg)

### <span class="icon-homecode" id="three" data-magellan-target="three"></span> TCP/IP

Вернемся к ответу от сервера, сразу после хедера в сообщение содержит то самое мясо, ради которого мы все это затевали, то есть, контент. В нашем примере - это HTML страница.

Так мы описали передачу сообщений от клиента к серверу и обратно через протокол HTTP, но HTTP не заботится о том, чтобы эти сообщения отправлялись, это все равно что у вас есть телефон и вы набрали номер абонента получателя и текст сообщения, но у вас нет СИМ карточки, а значит, у вас нет возможности передать сообщение.

Так вот, в нашем случае, оператор связи - это **Transmission Control Protocol (TCP)**, а если конкретней, то TCP/IP.
TCP/IP соединение похоже на телефонные звонок на корпоративную линию, когда вам надо позвонить в компанию, а потом еще набрать внутренний номер, чтобы добраться до конкретного абонента.

В случае TCP подключения, вам надо знать IP адрес и номер порта, на котором запущен нужный вам процес. Вся эта информация как раз и скрывается за URI, по которому можно узнать IP адрес, например, доменному имени student.webcamp.com.ua соответсвует IP адрес 151.101.112.133, обычно номер порта 80, именно так мы дозвонимся до конкретной машины, на которой запущен наш сайт.

![http tcp](/rest_student/img/http/http-tcp.jpg)

### <span class="icon-homecode" id="four" data-magellan-target="four"></span> Telnet

Можно еще больше вжиться в роль браузера, если использовать telnet - такой себе браузер на ручном управлении. Чтобы им воспользоваться надо открыть командную строку и выдать команду:

Telnet student.webcamp.com.ua 80

После того, как будет установлено подключение можно отправлять HTTP сообщение

```
GET /rest_student/index.html HTTP/1.1
Host: student.webcamp.com.ua
```

(здесь нужна одна пустая строка, для того чтобы закончить команду)

![http telnet](/rest_student/img/http/http-telnet.jpg)

Через долю секунды я получаю ответ от сервера: исходный код HTML страницы http://student.webcamp.com.ua/rest_student/index.html

---

### Небольшой тест

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSehRi0zCfFD1hDKsVYn5EbwfM8rysIniJbIxxAYNIILLwTBDg/viewform?embedded=true" width="760" height="500" frameborder="0" marginheight="0" marginwidth="0">Loading...</iframe>

---

#### Литература

- HTTP: The Definitive Guide by Brian Totty, Marjorie Sayer, Sailu Reddy, Anshu Aggarwal, David Gourley Publisher: O'Reilly Media, Inc. Release Date: September 2002 ISBN: 9781565925090